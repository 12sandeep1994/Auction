[{"C:\\Sandeep\\Higher Layer Project\\client_app\\src\\Auction.tsx":"1","C:\\Sandeep\\Higher Layer Project\\client_app\\src\\Home.tsx":"2","C:\\Sandeep\\Higher Layer Project\\client_app\\src\\index.tsx":"3","C:\\Sandeep\\Higher Layer Project\\client_app\\src\\App.tsx":"4"},{"size":13065,"mtime":1606870136665,"results":"5","hashOfConfig":"6"},{"size":6216,"mtime":1606777189991,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":522,"mtime":1606869644471,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1r2yddt",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Sandeep\\Higher Layer Project\\client_app\\src\\Auction.tsx",["19","20","21","22","23","24","25","26"],"C:\\Sandeep\\Higher Layer Project\\client_app\\src\\Home.tsx",["27"],"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport { useHistory } from 'react-router-dom'\r\nimport Auction from './Auction';\r\n\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n// import { Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\n\r\nfunction Home() {\r\n\r\n    const history = useHistory();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const [registerUserName, setRegisterUserName] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [newEmail, setNewEmail] = useState(\"\");\r\n\r\n    const handleLogin = async (event: any) => {\r\n        event.preventDefault();\r\n        if (!email || !password) return;\r\n\r\n        let serverResponse = await fetch(\"http://localhost:5000/login\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"password\": password,\r\n                \"email\": email\r\n            })\r\n        })\r\n\r\n        let responseJson = await serverResponse.json();\r\n        \r\n        if (!responseJson.name) {\r\n            alert(\"An error occurred\");\r\n            return;\r\n        }\r\n        history.push('/auction' , {userName : responseJson.name, userId : responseJson.id});\r\n\r\n    }\r\n\r\n\r\n    const handleRegistration = async (event: any) => {\r\n        event.preventDefault();\r\n        if (!registerUserName || !newPassword || !newEmail) return;\r\n\r\n        let serverResponse = await fetch(\"http://localhost:5000/register\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"clientName\": registerUserName,\r\n                \"password\": newPassword,\r\n                \"email\": newEmail\r\n            })\r\n        })\r\n\r\n        let responseJson = await serverResponse.json();\r\n        if (!responseJson.success) {\r\n            alert(responseJson.errorMessage);\r\n            return;\r\n        }\r\n\r\n        alert(responseJson.successMessage + \" Please login to continue\");\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div style= {{ alignItems : 'center'}}>\r\n      <div>\r\n        <br></br>\r\n        <Form>\r\n          <FormGroup>\r\n            <Label for=\"user\"><b>Enter your email </b></Label>\r\n                <Input type=\"text\" name=\"user\" id=\"user\" value={email} style={{width: \"25%\"}} \r\n                        onChange={e => setEmail(e.target.value)}/>\r\n                <br></br>\r\n                <Label for=\"password\"><b>Enter your Password </b></Label>\r\n                <Input type=\"text\" name=\"password\" id=\"password\" value={password} style={{width: \"25%\"}} \r\n                onChange={e => setPassword(e.target.value)}/>\r\n          </FormGroup>\r\n          <Button color=\"success\" size=\"lg\" onClick={handleLogin}>Login</Button>\r\n        </Form>\r\n      </div>\r\n\r\n      <div>\r\n        <br></br>\r\n        <Form>\r\n          <FormGroup>\r\n            <Label for=\"user\"><b>Enter your UserName</b></Label>\r\n                <Input type=\"text\" name=\"user\" id=\"user\" value={registerUserName}\r\n                        onChange={e => setRegisterUserName(e.target.value)} style={{width: \"25%\"}} \r\n                        />\r\n                <br></br>\r\n                <Label for=\"newEmail\"><b>Enter your Email</b></Label>\r\n                <Input type=\"text\" name=\"newEmail\" id=\"newEmail\" style={{width: \"25%\"}} \r\n                value={newEmail}\r\n                onChange={e => setNewEmail(e.target.value)}\r\n                required/>\r\n                <br></br>\r\n                <Label for=\"password\"><b>Enter your Password</b></Label>\r\n                <Input type=\"text\" name=\"password\" id=\"password\" value={newPassword}\r\n                        onChange={e => setNewPassword(e.target.value)}\r\n                        required style={{width: \"25%\"}} \r\n                />\r\n          </FormGroup>\r\n          <Button color=\"success\" size=\"lg\" onClick={handleRegistration}>Register</Button>\r\n        </Form>\r\n\r\n       \r\n      </div>\r\n\r\n\r\n\r\n\r\n{/* \r\n            <br></br>\r\n            <form onSubmit={handleLogin}>\r\n                \r\n                <label>\r\n                    Email:\r\n        <input\r\n                        type=\"text\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Password:\r\n        <input\r\n                        type=\"text\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n\r\n\r\n            <br></br>\r\n\r\n            <form onSubmit={handleRegistration}>\r\n                <label>\r\n                    User Name:\r\n        <input\r\n                        type=\"text\"\r\n                        value={registerUserName}\r\n                        onChange={e => setRegisterUserName(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Password:\r\n        <input\r\n                        type=\"text\"\r\n                        value={newPassword}\r\n                        onChange={e => setNewPassword(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Email:\r\n        <input\r\n                        type=\"text\"\r\n                        value={newEmail}\r\n                        onChange={e => setNewEmail(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n            </form>*/}\r\n\r\n\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Sandeep\\Higher Layer Project\\client_app\\src\\index.tsx",[],"C:\\Sandeep\\Higher Layer Project\\client_app\\src\\App.tsx",[],{"ruleId":"28","severity":1,"message":"29","line":1,"column":38,"nodeType":"30","messageId":"31","endLine":1,"endColumn":44},{"ruleId":"28","severity":1,"message":"32","line":1,"column":46,"nodeType":"30","messageId":"31","endLine":1,"endColumn":57},{"ruleId":"28","severity":1,"message":"33","line":6,"column":11,"nodeType":"30","messageId":"31","endLine":6,"endColumn":21},{"ruleId":"28","severity":1,"message":"34","line":7,"column":8,"nodeType":"30","messageId":"31","endLine":7,"endColumn":10},{"ruleId":"28","severity":1,"message":"35","line":57,"column":10,"nodeType":"30","messageId":"31","endLine":57,"endColumn":19},{"ruleId":"36","severity":1,"message":"37","line":105,"column":8,"nodeType":"38","endLine":105,"endColumn":18,"suggestions":"39"},{"ruleId":"36","severity":1,"message":"40","line":130,"column":7,"nodeType":"38","endLine":130,"endColumn":9,"suggestions":"41"},{"ruleId":"36","severity":1,"message":"42","line":138,"column":31,"nodeType":"43","endLine":138,"endColumn":52},{"ruleId":"28","severity":1,"message":"44","line":7,"column":8,"nodeType":"30","messageId":"31","endLine":7,"endColumn":15},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'RouteProps' is defined but never used.","'io' is defined but never used.","'countDown' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["45"],"React Hook useEffect has missing dependencies: 'activateTimer' and 'auctionItemsObj'. Either include them or remove the dependency array. You can also do a functional update 'setAuctionItemsObj(a => ...)' if you only need 'auctionItemsObj' in the 'setAuctionItemsObj' call.",["46"],"Assignments to the 'auctionItemsObj' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","'Auction' is defined but never used.",{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},"Update the dependencies array to be: [history, location]",{"range":"51","text":"52"},"Update the dependencies array to be: [activateTimer, auctionItemsObj]",{"range":"53","text":"54"},[3066,3076],"[history, location]",[3776,3778],"[activateTimer, auctionItemsObj]"]